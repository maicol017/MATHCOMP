# -*- coding: utf-8 -*-
"""Tolertancia porcentual.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YSfxGi8Zh4xU2s1d1HIYO9ejrqfVSrWw
"""

import math

def factorial(n):
    if n == 0:
        return 1
    return n * factorial(n-1)

def serie_maclaurin_exp(x, num_terminos=16):
    # Valor real de e^x para comparar
    valor_real = math.exp(x)

    # Inicializar suma
    suma = 0

    print(f"Calculando e^{x} usando serie de Maclaurin hasta el término {num_terminos-1}")
    print("\nTérmino | x^n/n! | Aproximación | Error Relativo (%)")
    print("-" * 65)

    # Calcular los primeros 16 términos
    for n in range(num_terminos):
        # Calcular término actual
        termino = (x**n) / factorial(n)
        suma += termino

        # Calcular error relativo porcentual
        error_relativo = abs((valor_real - suma) / valor_real * 100)

        # Mostrar información del término actual
        print(f"{n:^7} | {termino:.8f} | {suma:.8f} | {error_relativo:.8f}")

    return suma, error_relativo

# Parámetros del problema
x = 0.5  # El exponente que queremos calcular
num_terminos = 16  # Número de términos a calcular

# Calcular e^0.5
resultado, error_final = serie_maclaurin_exp(x, num_terminos)

print("\nResultados finales:")
print(f"e^{x} ≈ {resultado:.10f}")
print(f"Valor real = {math.exp(x):.10f}")
print(f"Error relativo final: {error_final:.10f}%")

# Mostrar los valores en notación científica
print("\nResultados en notación científica:")
print(f"e^{x} ≈ {resultado:.10e}")
print(f"Valor real = {math.exp(x):.10e}")