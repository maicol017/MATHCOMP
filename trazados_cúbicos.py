# -*- coding: utf-8 -*-
"""Trazados Cúbicos

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YVUH_CVL0RRxs1kmcsJ9AEGsKZNRHkp0
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy.interpolate import lagrange
from numpy.polynomial.polynomial import Polynomial
x_points = np.array([0, 1, 2, 3, 4, 5, 6])
y_points = np.array([3, 5, 6, 5, -2, 2, 13])
def polinomio_lagrange(x_points, y_points, x_value):
    poly = lagrange(x_points, y_points)
    return poly(x_value), poly
def trazadores_cubicos(x, y, x_value):
    n = len(x) - 1
    h = np.diff(x)
    alfa = [0] + [3 * (y[i + 1] - y[i]) / h[i] - 3 * (y[i] - y[i - 1]) / h[i - 1] for i in range(1, n)] + [0]
    l = np.ones(n + 1)
    mu = np.zeros(n)
    z = np.zeros(n + 1)
    for i in range(1, n):
        l[i] = 2 * (x[i + 1] - x[i - 1]) - h[i - 1] * mu[i - 1]
        mu[i] = h[i] / l[i]
        z[i] = (alfa[i] - h[i - 1] * z[i - 1]) / l[i]
    b = np.zeros(n)
    c = np.zeros(n + 1)
    d = np.zeros(n)
    for j in range(n - 1, -1, -1):
        c[j] = z[j] - mu[j] * c[j + 1]
        b[j] = (y[j + 1] - y[j]) / h[j] - h[j] * (c[j + 1] + 2 * c[j]) / 3
        d[j] = (c[j + 1] - c[j]) / (3 * h[j])
    i = np.searchsorted(x, x_value) - 1
    s = y[i] + b[i] * (x_value - x[i]) + c[i] * (x_value - x[i])**2 + d[i] * (x_value - x[i])**3
    return s
x_estimate = 3.25
f_3_25_lagrange, poly_lagrange = polinomio_lagrange(x_points, y_points, x_estimate)
f_3_25_cubic = trazadores_cubicos(x_points, y_points, x_estimate)
x_vals = np.linspace(min(x_points), max(x_points), 500)
y_vals_lagrange = lagrange(x_points, y_points)(x_vals)
y_vals_cubic = [trazadores_cubicos(x_points, y_points, xi) for xi in x_vals]
plt.figure(figsize=(10, 6))
plt.plot(x_vals, y_vals_lagrange, label='Polinomio de Lagrange', color='blue')
plt.plot(x_vals, y_vals_cubic, label='Trazadores Cúbicos', color='red', linestyle='--')
plt.scatter(x_points, y_points, color='black', label='Puntos de datos')
plt.scatter(x_estimate, f_3_25_lagrange, color='blue', marker='o', label=f'Lagrange f({x_estimate})')
plt.scatter(x_estimate, f_3_25_cubic, color='red', marker='x', label=f'Trazador Cúbico f({x_estimate})')
plt.xlabel('x')
plt.ylabel('f(x)')
plt.legend()
plt.title('Interpolación: Polinomio de Lagrange y Trazadores Cúbicos')
plt.grid(True)
plt.show()
f_3_25_lagrange, f_3_25_cubic